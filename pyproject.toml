[tool.poetry]
name = "vcspull"
version = "1.22.0"
description = "Manage and sync multiple git, mercurial, and svn repos"
license = "MIT"
authors = ["Tony Narlock <tony@git-pull.com>"]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Environment :: Web Environment",
  "Intended Audience :: Developers",
  "Operating System :: POSIX",
  "Operating System :: MacOS :: MacOS X",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Utilities",
  "Topic :: System :: Shells",
]
packages = [
  { include = "*", from = "src" },
]
include = [
  { path = "tests", format = "sdist" },
  { path = ".tmuxp.yaml", format = "sdist" },
  { path = "docs", format = "sdist" },
  { path = "examples", format = "sdist" },
  { path = "conftest.py", format = "sdist" },
]
readme = 'README.md'
keywords = [
  "vcspull",
  "vcs",
  "git",
  "svn",
  "subversion",
  "hg",
  "mercurial",
  "manage",
  "manager",
  "sync",
  "fetcher",
  "updater",
  "json",
  "yaml",
]

homepage = "https://vcspull.git-pull.com"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/vcs-python/vcspull/issues"
Documentation = "https://vcspull.git-pull.com"
Repository = "https://github.com/vcs-python/vcspull"
Changes = "https://github.com/vcs-python/vcspull/blob/master/CHANGES"

[tool.poetry.scripts]
vcspull = 'vcspull:cli.cli'

[tool.poetry.dependencies]
python = "^3.9"
libvcs = "~0.22.1"
colorama = ">=0.3.9"
PyYAML = "^6.0"

[tool.poetry.group.dev.dependencies]
### Docs ###
sphinx = "*"
furo = "*"
gp-libs = "*"
sphinx-autobuild = "*"
sphinx-autodoc-typehints = "*"
sphinx-inline-tabs = "*"
sphinxext-opengraph = "<0.8" # https://github.com/wpilibsuite/sphinxext-opengraph/issues/100
sphinx-copybutton = "*"
sphinxext-rediraffe = "*"
sphinx-argparse = "*"
myst_parser = ">=0.18.1"

### Testing ###
pytest = "*"
pytest-rerunfailures = "*"
pytest-watcher = "*"

### Coverage ###
codecov = "*"
coverage = "*"
pytest-cov = "*"

### Lint ###
black = "*"
ruff = "*"
mypy = "*"

### Lint : Annotations ###
types-requests = "*"
types-PyYAML = "*"
types-colorama = "*"

[tool.poetry.extras]
docs = [
  "sphinx",
  "sphinx-argparse",
  "sphinx-autodoc-typehints",
  "sphinx-autobuild",
  "sphinxext-rediraffe",
  "sphinx-copybutton",
  "sphinxext-opengraph",
  "sphinx-inline-tabs",
  "myst_parser",
  "furo",
  "gp-libs",
]
test = ["pytest", "pytest-rerunfailures", "pytest-watcher"]
coverage = ["codecov", "coverage", "pytest-cov"]
lint = [
  "black",
  "ruff",
  "mypy",
  "types-requests",
  "types-PyYAML",
  "types-colorama",
]

[tool.mypy]
python_version = 3.9
warn_unused_configs = true
files = [
  "src",
  "tests",
]
strict = true

[[tool.mypy.overrides]]
module = [
  "shtab",
]
ignore_missing_imports = true

[tool.coverage.run]
branch = true
parallel = true
omit = [
  "*/_*",
  "*/_compat.py",
  "docs/conf.py",
]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise NotImplementedError",
  "return NotImplemented",
  "def parse_args",
  "if TYPE_CHECKING:",
  "if t.TYPE_CHECKING:",
  "@overload( |$)",
]

[tool.ruff]
target-version = "py39"
select = [
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
  "ICN", # flake8-import-conventions
  "UP", # pyupgrade
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "Q", # flake8-quotes
  "N", # pep8-naming
  "D", # pydocstyle
  "PTH", # flake8-use-pathlib
  "SIM", # flake8-simplify
  "PT", # flake8-pytest-style
  "TRY", # Trycertatops
  "PERF", # Perflint
  "RUF", # Ruff-specific rules
]

[tool.ruff.isort]
known-first-party = [
  "vcspull",
]
combine-as-imports = true

[tool.ruff.per-file-ignores]
"*/__init__.py" = ["F401"]
"tests/*" = ["D"]

[tool.pytest.ini_options]
addopts = "--tb=short --no-header --showlocals"
testpaths = [
  "src/vcspull",
  "tests",
  "docs",
]
filterwarnings = [
  "ignore:The frontend.Option(Parser)? class.*:DeprecationWarning::",
]

[build-system]
requires = ["poetry_core>=1.0.0", "setuptools>50"]
build-backend = "poetry.core.masonry.api"
